/*----------------------------------------------------------------------------------*/
/* Product:            Visual Data Mining and Machine Learning                      */
/* Release Version:    V2020.1.4                                                    */
/* Component Version:  V2020.1.4                                                    */
/* CAS Version:        V.04.00M0P03042021                                           */
/* SAS Version:        V.04.00M0P030421                                             */
/* Site Number:        70180938                                                     */
/* Host:               sas-cas-server-default-client                                */
/* Encoding:           utf-8                                                        */
/* Java Encoding:      UTF8                                                         */
/* Locale:             en_US                                                        */
/* Project GUID:       1bc33459-9156-4dc9-8add-cdb099fede20                         */
/* Node GUID:          a2b068db-d36e-48ad-93ac-b0615e839b32                         */
/* Node Id:            9MQJE3ALZYLG7MV8HKBIVUR02                                    */
/* Algorithm:          Decision Tree                                                */
/* Generated by:       sasadm                                                       */
/* Date:               08MAR2021:21:55:23                                           */
/*----------------------------------------------------------------------------------*/
package MS_a2b068dbd36e48ad93acb0615e839b32_08MAR2021215523727 / overwrite=yes;
   dcl double "IMP_CLAGE" having label n'Imputed CLAGE';
   dcl double "IMP_CLNO" having label n'Imputed CLNO';
   dcl double "IMP_DEBTINC" having label n'Imputed DEBTINC';
   dcl double "IMP_DELINQ" having label n'Imputed DELINQ';
   dcl double "IMP_DEROG" having label n'Imputed DEROG';
   dcl nchar(7) "IMP_JOB" having label n'Imputed JOB';
   dcl double "IMP_MORTDUE" having label n'Imputed MORTDUE';
   dcl double "IMP_NINQ" having label n'Imputed NINQ';
   dcl nchar(7) "IMP_REASON" having label n'Imputed REASON';
   dcl double "IMP_YOJ" having label n'Imputed YOJ';
   dcl double "P_BAD0" having label n'Predicted: BAD=0';
   dcl double "P_BAD1" having label n'Predicted: BAD=1';
   dcl double "_leaf_id_";
   dcl nchar(12) "I_BAD" having label n'Into: BAD';
   dcl double "EM_EVENTPROBABILITY";
   dcl nchar(12) "EM_CLASSIFICATION";
   dcl double "EM_PROBABILITY";
   varlist allvars [_all_];
 
   method _3RVR68WPXKF7Z5LEP6GOKERIG();
       
      if MISSING("CLAGE") then do ;
      "IMP_CLAGE" = 180.06572076;
      end;
      else "IMP_CLAGE" = "CLAGE";
      if MISSING("CLNO") then do ;
      "IMP_CLNO" = 21.413983174;
      end;
      else "IMP_CLNO" = "CLNO";
      if MISSING("DEBTINC") then do ;
      "IMP_DEBTINC" = 33.702060536;
      end;
      else "IMP_DEBTINC" = "DEBTINC";
      if MISSING("DELINQ") then do ;
      "IMP_DELINQ" = 0.0;
      end;
      else "IMP_DELINQ" = "DELINQ";
      if MISSING("DEROG") then do ;
      "IMP_DEROG" = 0.0;
      end;
      else "IMP_DEROG" = "DEROG";
      if MISSING("JOB") then do ;
      "IMP_JOB" = 'Other';
      end;
      else "IMP_JOB" = "JOB";
      if MISSING("MORTDUE") then do ;
      "IMP_MORTDUE" = 74833.24575;
      end;
      else "IMP_MORTDUE" = "MORTDUE";
      if MISSING("NINQ") then do ;
      "IMP_NINQ" = 0.0;
      end;
      else "IMP_NINQ" = "NINQ";
      if MISSING("REASON") then do ;
      "IMP_REASON" = 'DebtCon';
      end;
      else "IMP_REASON" = "REASON";
      if MISSING("YOJ") then do ;
      "IMP_YOJ" = 9.0018179041;
      end;
      else "IMP_YOJ" = "YOJ";
    
   end;
    
   method _9MQJE3ALZYLG7MV8HKBIVUR02();
      dcl double _P_;
      dcl double _NEW_ID_;
      dcl double _NODE_ID_;
      dcl double _NUMVAL_;
      dcl double _DT_PRED_PROB_;
      dcl double _DT_PRED_LEV_;
      dcl double _I_;
      dcl double _DT_PREDP_;
      dcl nchar(12) _STRFMT_;
      dcl double _DT_FI_5012850_[2];
      dcl nchar(12) _TLEVNAME_5012850_[2];
       
      _TLEVNAME_5012850_:=('           1', '           0');
      _STRFMT_ = ' ';
      _NODE_ID_ = 0.0;
      _NEW_ID_ = -1.0;
      NEXTNODE_5012850: if _NODE_ID_ = 0.0 then do ;
      _STRFMT_ = LEFT(TRIM(put(IMP_DELINQ, BEST12.)));
      if _STRFMT_ in ('12', '15', '5', '4', '7', '6', '1', '3', '2', '8') then
      do ;
      _NEW_ID_ = 1.0;
      end;
      else if _STRFMT_ in ('0') then do ;
      _NEW_ID_ = 2.0;
      end;
      else do ;
      _NEW_ID_ = 2.0;
      end;
      end;
      else if _NODE_ID_ = 1.0 then do ;
      _NUMVAL_ = IMP_DEBTINC;
      if MISSING(_NUMVAL_) then do ;
      _NODE_ID_ = 3.0;
      goto NEXTNODE_5012850;
      end;
      if (_NUMVAL_ >= 0.5244992154 & _NUMVAL_ < 33.7622401663464) then do ;
      _NEW_ID_ = 3.0;
      end;
      else if (_NUMVAL_ >= 33.7622401663464 & _NUMVAL_ < 203.31214869) then
      do ;
      _NEW_ID_ = 4.0;
      end;
      else if (_NUMVAL_ < 0.5244992154) then do ;
      _NEW_ID_ = 3.0;
      end;
      else if (_NUMVAL_ >= 203.31214869) then do ;
      _NEW_ID_ = 4.0;
      end;
      else do ;
      _NEW_ID_ = 3.0;
      end;
      end;
      else if _NODE_ID_ = 2.0 then do ;
      _NUMVAL_ = IMP_DEBTINC;
      if MISSING(_NUMVAL_) then do ;
      _NODE_ID_ = 6.0;
      goto NEXTNODE_5012850;
      end;
      if (_NUMVAL_ >= 0.5244992154 & _NUMVAL_ < 33.6705273399606) then do ;
      _NEW_ID_ = 5.0;
      end;
      else if (_NUMVAL_ >= 33.6705273399606 & _NUMVAL_ < 203.31214869) then
      do ;
      _NEW_ID_ = 6.0;
      end;
      else if (_NUMVAL_ < 0.5244992154) then do ;
      _NEW_ID_ = 5.0;
      end;
      else if (_NUMVAL_ >= 203.31214869) then do ;
      _NEW_ID_ = 6.0;
      end;
      else do ;
      _NEW_ID_ = 6.0;
      end;
      end;
      else if _NODE_ID_ = 3.0 then do ;
      _NUMVAL_ = IMP_DEBTINC;
      if MISSING(_NUMVAL_) then do ;
      _NODE_ID_ = 8.0;
      goto NEXTNODE_5012850;
      end;
      if (_NUMVAL_ >= 0.5244992154 & _NUMVAL_ < 33.4934797649212) then do ;
      _NEW_ID_ = 7.0;
      end;
      else if (_NUMVAL_ >= 33.4934797649212 & _NUMVAL_ < 203.31214869) then
      do ;
      _NEW_ID_ = 8.0;
      end;
      else if (_NUMVAL_ < 0.5244992154) then do ;
      _NEW_ID_ = 7.0;
      end;
      else if (_NUMVAL_ >= 203.31214869) then do ;
      _NEW_ID_ = 8.0;
      end;
      else do ;
      _NEW_ID_ = 8.0;
      end;
      end;
      else if _NODE_ID_ = 4.0 then do ;
      _NUMVAL_ = IMP_DEBTINC;
      if MISSING(_NUMVAL_) then do ;
      _NUMVAL_ = -1.7976931348623E308;
      end;
      if (_NUMVAL_ >= 0.5244992154 & _NUMVAL_ < 43.9169958330393) then do ;
      _NEW_ID_ = 9.0;
      end;
      else if (_NUMVAL_ >= 43.9169958330393 & _NUMVAL_ < 203.31214869) then
      do ;
      _NEW_ID_ = 10.0;
      end;
      else if (_NUMVAL_ < 0.5244992154) then do ;
      _NEW_ID_ = 9.0;
      end;
      else if (_NUMVAL_ >= 203.31214869) then do ;
      _NEW_ID_ = 10.0;
      end;
      else do ;
      _NEW_ID_ = 9.0;
      end;
      end;
      else if _NODE_ID_ = 5.0 then do ;
      _LEAF_ID_ = 5.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 1.0;
      _DT_PRED_PROB_ = 0.95742667928098;
      _DT_FI_5012850_[1.0] = 0.04257332071901;
      _DT_FI_5012850_[2.0] = 0.95742667928098;
      end;
      else if _NODE_ID_ = 6.0 then do ;
      _NUMVAL_ = IMP_DEBTINC;
      if MISSING(_NUMVAL_) then do ;
      _NODE_ID_ = 12.0;
      goto NEXTNODE_5012850;
      end;
      if (_NUMVAL_ >= 0.5244992154 & _NUMVAL_ < 33.7622401663464) then do ;
      _NEW_ID_ = 11.0;
      end;
      else if (_NUMVAL_ >= 33.7622401663464 & _NUMVAL_ < 203.31214869) then
      do ;
      _NEW_ID_ = 12.0;
      end;
      else if (_NUMVAL_ < 0.5244992154) then do ;
      _NEW_ID_ = 11.0;
      end;
      else if (_NUMVAL_ >= 203.31214869) then do ;
      _NEW_ID_ = 12.0;
      end;
      else do ;
      _NEW_ID_ = 12.0;
      end;
      end;
      else if _NODE_ID_ = 7.0 then do ;
      _NUMVAL_ = IMP_DEBTINC;
      if MISSING(_NUMVAL_) then do ;
      _NUMVAL_ = -1.7976931348623E308;
      end;
      if (_NUMVAL_ >= 0.5244992154 & _NUMVAL_ < 12.4081538974724) then do ;
      _NEW_ID_ = 13.0;
      end;
      else if (_NUMVAL_ >= 12.4081538974724 & _NUMVAL_ < 203.31214869) then
      do ;
      _NEW_ID_ = 14.0;
      end;
      else if (_NUMVAL_ < 0.5244992154) then do ;
      _NEW_ID_ = 13.0;
      end;
      else if (_NUMVAL_ >= 203.31214869) then do ;
      _NEW_ID_ = 14.0;
      end;
      else do ;
      _NEW_ID_ = 14.0;
      end;
      end;
      else if _NODE_ID_ = 8.0 then do ;
      _LEAF_ID_ = 8.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 0.0;
      _DT_PRED_PROB_ = 0.81227436823104;
      _DT_FI_5012850_[1.0] = 0.81227436823104;
      _DT_FI_5012850_[2.0] = 0.18772563176895;
      end;
      else if _NODE_ID_ = 9.0 then do ;
      _STRFMT_ = LEFT(TRIM(put(IMP_DELINQ, BEST12.)));
      if _STRFMT_ in ('4', '1', '3', '2') then do ;
      _NEW_ID_ = 15.0;
      end;
      else if _STRFMT_ in ('7', '6', '8') then do ;
      _NEW_ID_ = 16.0;
      end;
      else do ;
      _NEW_ID_ = 15.0;
      end;
      end;
      else if _NODE_ID_ = 10.0 then do ;
      _LEAF_ID_ = 10.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 0.0;
      _DT_PRED_PROB_ = 1.0;
      _DT_FI_5012850_[1.0] = 1.0;
      _DT_FI_5012850_[2.0] = 0.0;
      end;
      else if _NODE_ID_ = 11.0 then do ;
      _NUMVAL_ = IMP_CLAGE;
      if MISSING(_NUMVAL_) then do ;
      _NODE_ID_ = 17.0;
      goto NEXTNODE_5012850;
      end;
      if (_NUMVAL_ >= 0.0 & _NUMVAL_ < 186.996275468425) then do ;
      _NEW_ID_ = 17.0;
      end;
      else if (_NUMVAL_ >= 186.996275468425 & _NUMVAL_ < 1168.2335609) then
      do ;
      _NEW_ID_ = 18.0;
      end;
      else if (_NUMVAL_ < 0.0) then do ;
      _NEW_ID_ = 17.0;
      end;
      else if (_NUMVAL_ >= 1168.2335609) then do ;
      _NEW_ID_ = 18.0;
      end;
      else do ;
      _NEW_ID_ = 17.0;
      end;
      end;
      else if _NODE_ID_ = 12.0 then do ;
      _NUMVAL_ = IMP_DEBTINC;
      if MISSING(_NUMVAL_) then do ;
      _NODE_ID_ = 19.0;
      goto NEXTNODE_5012850;
      end;
      if (_NUMVAL_ >= 0.5244992154 & _NUMVAL_ < 43.9169958330393) then do ;
      _NEW_ID_ = 19.0;
      end;
      else if (_NUMVAL_ >= 43.9169958330393 & _NUMVAL_ < 203.31214869) then
      do ;
      _NEW_ID_ = 20.0;
      end;
      else if (_NUMVAL_ < 0.5244992154) then do ;
      _NEW_ID_ = 19.0;
      end;
      else if (_NUMVAL_ >= 203.31214869) then do ;
      _NEW_ID_ = 20.0;
      end;
      else do ;
      _NEW_ID_ = 19.0;
      end;
      end;
      else if _NODE_ID_ = 13.0 then do ;
      _LEAF_ID_ = 13.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 0.0;
      _DT_PRED_PROB_ = 1.0;
      _DT_FI_5012850_[1.0] = 1.0;
      _DT_FI_5012850_[2.0] = 0.0;
      end;
      else if _NODE_ID_ = 14.0 then do ;
      _LEAF_ID_ = 14.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 1.0;
      _DT_PRED_PROB_ = 0.86046511627906;
      _DT_FI_5012850_[1.0] = 0.13953488372093;
      _DT_FI_5012850_[2.0] = 0.86046511627906;
      end;
      else if _NODE_ID_ = 15.0 then do ;
      _LEAF_ID_ = 15.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 1.0;
      _DT_PRED_PROB_ = 0.83464566929133;
      _DT_FI_5012850_[1.0] = 0.16535433070866;
      _DT_FI_5012850_[2.0] = 0.83464566929133;
      end;
      else if _NODE_ID_ = 16.0 then do ;
      _LEAF_ID_ = 16.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 0.0;
      _DT_PRED_PROB_ = 1.0;
      _DT_FI_5012850_[1.0] = 1.0;
      _DT_FI_5012850_[2.0] = 0.0;
      end;
      else if _NODE_ID_ = 17.0 then do ;
      _LEAF_ID_ = 17.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 0.0;
      _DT_PRED_PROB_ = 0.57758620689655;
      _DT_FI_5012850_[1.0] = 0.57758620689655;
      _DT_FI_5012850_[2.0] = 0.42241379310344;
      end;
      else if _NODE_ID_ = 18.0 then do ;
      _LEAF_ID_ = 18.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 1.0;
      _DT_PRED_PROB_ = 0.68840579710144;
      _DT_FI_5012850_[1.0] = 0.31159420289855;
      _DT_FI_5012850_[2.0] = 0.68840579710144;
      end;
      else if _NODE_ID_ = 19.0 then do ;
      _LEAF_ID_ = 19.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 1.0;
      _DT_PRED_PROB_ = 0.94206349206349;
      _DT_FI_5012850_[1.0] = 0.0579365079365;
      _DT_FI_5012850_[2.0] = 0.94206349206349;
      end;
      else if _NODE_ID_ = 20.0 then do ;
      _LEAF_ID_ = 20.0;
      _NEW_ID_ = -1.0;
      _DT_PRED_LEV_ = 0.0;
      _DT_PRED_PROB_ = 0.75;
      _DT_FI_5012850_[1.0] = 0.75;
      _DT_FI_5012850_[2.0] = 0.25;
      end;
      if _NEW_ID_ >= 0.0 then do ;
      _NODE_ID_ = _NEW_ID_;
      goto NEXTNODE_5012850;
      end;
      I_BAD = _TLEVNAME_5012850_[_DT_PRED_LEV_ + 1.0];
      _I_ = 1.0;
      _DT_PREDP_ = _DT_FI_5012850_[_I_];
      P_BAD1 = _DT_PREDP_;
      _I_ + 1.0;
      _DT_PREDP_ = _DT_FI_5012850_[_I_];
      P_BAD0 = _DT_PREDP_;
      _I_ + 1.0;
      if "P_BAD0" = . then "P_BAD0" = 0.8005033557;
      if "P_BAD1" = . then "P_BAD1" = 0.1994966443;
      if MISSING("I_BAD") then do ;
      _P_ = 0.0;
      if "P_BAD1" > _P_ then do ;
      _P_ = "P_BAD1";
      "I_BAD" = '           1';
      end;
      if "P_BAD0" > _P_ then do ;
      _P_ = "P_BAD0";
      "I_BAD" = '           0';
      end;
      end;
      EM_EVENTPROBABILITY = "P_BAD1";
      EM_CLASSIFICATION = "I_BAD";
      EM_PROBABILITY = MAX("P_BAD1", "P_BAD0");
    
   end;
    
 
   method score(
      double "CLAGE",
      double "CLNO",
      double "DEBTINC",
      double "DELINQ",
      double "DEROG",
      varchar(7) "JOB",
      double "MORTDUE",
      double "NINQ",
      varchar(7) "REASON",
      double "YOJ",
      IN_OUT char(12) "EM_CLASSIFICATION",
      IN_OUT double "EM_EVENTPROBABILITY",
      IN_OUT double "EM_PROBABILITY",
      IN_OUT double "IMP_CLAGE",
      IN_OUT double "IMP_DEBTINC",
      IN_OUT double "IMP_DELINQ",
      IN_OUT double "IMP_DEROG",
      IN_OUT char(7) "IMP_JOB",
      IN_OUT double "IMP_NINQ",
      IN_OUT char(7) "IMP_REASON",
      IN_OUT double "IMP_YOJ",
      IN_OUT char(12) "I_BAD",
      IN_OUT double "P_BAD0",
      IN_OUT double "P_BAD1",
      IN_OUT double "_leaf_id_"
   );
      this."CLAGE"= "CLAGE";
      this."CLNO"= "CLNO";
      this."DEBTINC"= "DEBTINC";
      this."DELINQ"= "DELINQ";
      this."DEROG"= "DEROG";
      this."JOB"= "JOB";
      this."MORTDUE"= "MORTDUE";
      this."NINQ"= "NINQ";
      this."REASON"= "REASON";
      this."YOJ"= "YOJ";
 
      _3RVR68WPXKF7Z5LEP6GOKERIG();
      _9MQJE3ALZYLG7MV8HKBIVUR02();
 
      "EM_CLASSIFICATION"= this."EM_CLASSIFICATION";
      "EM_EVENTPROBABILITY"= this."EM_EVENTPROBABILITY";
      "EM_PROBABILITY"= this."EM_PROBABILITY";
      "IMP_CLAGE"= this."IMP_CLAGE";
      "IMP_DEBTINC"= this."IMP_DEBTINC";
      "IMP_DELINQ"= this."IMP_DELINQ";
      "IMP_DEROG"= this."IMP_DEROG";
      "IMP_JOB"= this."IMP_JOB";
      "IMP_NINQ"= this."IMP_NINQ";
      "IMP_REASON"= this."IMP_REASON";
      "IMP_YOJ"= this."IMP_YOJ";
      "I_BAD"= this."I_BAD";
      "P_BAD0"= this."P_BAD0";
      "P_BAD1"= this."P_BAD1";
      "_leaf_id_"= this."_leaf_id_";
   end;
 
 
   method predictedscore(
      double "CLAGE",
      double "CLNO",
      double "DEBTINC",
      double "DELINQ",
      double "DEROG",
      varchar(7) "JOB",
      double "MORTDUE",
      double "NINQ",
      varchar(7) "REASON",
      double "YOJ",
      IN_OUT char(12) "EM_CLASSIFICATION",
      IN_OUT double "EM_EVENTPROBABILITY",
      IN_OUT double "EM_PROBABILITY",
      IN_OUT char(12) "I_BAD",
      IN_OUT double "P_BAD0",
      IN_OUT double "P_BAD1"
   );
      this."CLAGE"= "CLAGE";
      this."CLNO"= "CLNO";
      this."DEBTINC"= "DEBTINC";
      this."DELINQ"= "DELINQ";
      this."DEROG"= "DEROG";
      this."JOB"= "JOB";
      this."MORTDUE"= "MORTDUE";
      this."NINQ"= "NINQ";
      this."REASON"= "REASON";
      this."YOJ"= "YOJ";
 
      _3RVR68WPXKF7Z5LEP6GOKERIG();
      _9MQJE3ALZYLG7MV8HKBIVUR02();
 
      "EM_CLASSIFICATION"= this."EM_CLASSIFICATION";
      "EM_EVENTPROBABILITY"= this."EM_EVENTPROBABILITY";
      "EM_PROBABILITY"= this."EM_PROBABILITY";
      "I_BAD"= this."I_BAD";
      "P_BAD0"= this."P_BAD0";
      "P_BAD1"= this."P_BAD1";
   end;
 
endpackage;
