{"scope":"PUBLIC","source":"package llm_guardrails_ollama / overwrite=yes;\ndcl package pymas pm;\ndcl package logger logr('App.MM.Python.DS2');\ndcl varchar(32767) character set utf8 pypgm;\ndcl int resultCode revision;\n\nmethod score(varchar(1000) \"prompt\",\nvarchar(1000) \"system\",\nvarchar(8000) \"history\",\nvarchar(200) \"model\",\nvarchar(200) \"embedder\",\nvarchar(200) \"collection\",\nvarchar(200) \"host\",\ndouble \"model_port\",\ndouble \"vector_port\",\nin_out double resultCode,\nin_out varchar(4000) \"response\");\n\n   resultCode = revision = 0;\n   if null(pm) then do;\n      pm = _new_ pymas();\n      resultCode = pm.useModule('model_exec_3aedcf9f-0404-4068-a606-2f28c16d0955', 1);\n      if resultCode then do;\n         resultCode = pm.appendSrcLine('import sys');\n         resultCode = pm.appendSrcLine('sys.path.append(\"/modules/d67f78ca-d36c-4ded-80c2-f8187d8c2b38/\")');\n         resultCode = pm.appendSrcLine('import settings_d67f78ca_d36c_4ded_80c2_f8187d8c2b38');\n         resultCode = pm.appendSrcLine('settings_d67f78ca_d36c_4ded_80c2_f8187d8c2b38.pickle_path = \"/modules/d67f78ca-d36c-4ded-80c2-f8187d8c2b38/\"');\n         resultCode = pm.appendSrcLine('import llm_guardrails_ollama_a4ca6924_cd93_4bb7_81fc_c0fe29734b35');\n         resultCode = pm.appendSrcLine('def scoreModel(prompt, system, history, model, embedder, collection, host, model_port, vector_port):');\n         resultCode = pm.appendSrcLine('    \"Output: response\"');\n         resultCode = pm.appendSrcLine('    return llm_guardrails_ollama_a4ca6924_cd93_4bb7_81fc_c0fe29734b35.scoreModel(prompt, system, history, model, embedder, collection, host, model_port, vector_port)');\n\n         revision = pm.publish(pm.getSource(), 'model_exec_3aedcf9f-0404-4068-a606-2f28c16d0955');\n         if ( revision \u003c 1 ) then do;\n            logr.log( 'e', 'py.publish() failed.');\n            resultCode = -1;\n            return;\n         end;\n      end;\n   end;\n\n   resultCode = pm.useMethod('scoreModel');\n   if resultCode then do;\n      logr.log('E', 'useMethod() failed. resultCode=$s', resultCode);\n      return;\n   end;\n   resultCode = pm.setString('prompt', prompt);\n   if resultCode then\n      logr.log('E', 'setString for prompt failed.  resultCode=$s', resultCode);\n   resultCode = pm.setString('system', system);\n   if resultCode then\n      logr.log('E', 'setString for system failed.  resultCode=$s', resultCode);\n   resultCode = pm.setString('history', history);\n   if resultCode then\n      logr.log('E', 'setString for history failed.  resultCode=$s', resultCode);\n   resultCode = pm.setString('model', model);\n   if resultCode then\n      logr.log('E', 'setString for model failed.  resultCode=$s', resultCode);\n   resultCode = pm.setString('embedder', embedder);\n   if resultCode then\n      logr.log('E', 'setString for embedder failed.  resultCode=$s', resultCode);\n   resultCode = pm.setString('collection', collection);\n   if resultCode then\n      logr.log('E', 'setString for collection failed.  resultCode=$s', resultCode);\n   resultCode = pm.setString('host', host);\n   if resultCode then\n      logr.log('E', 'setString for host failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('model_port', model_port);\n   if resultCode then\n      logr.log('E', 'setDouble for model_port failed.  resultCode=$s', resultCode);\n   resultCode = pm.setDouble('vector_port', vector_port);\n   if resultCode then\n      logr.log('E', 'setDouble for vector_port failed.  resultCode=$s', resultCode);\n   resultCode = pm.execute();\n   if (resultCode) then\n      logr.log('E', 'Error: pm.execute failed.  resultCode=$s', resultCode);\n   else do;\n      \"response\" = pm.getString('response');\n   end;\nend;\n\n endpackage;","properties":[{"name":"sourceURI","value":"/modelRepository/models/d67f78ca-d36c-4ded-80c2-f8187d8c2b38"}]}